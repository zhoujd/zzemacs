* GDB

https://www.emacswiki.org/emacs/GDB-MI

** gdb -annotate

$ gdb -annotate 1 /bin/ls
(gdb) help set annotate
Set annotation_level.
0 => normal
1 => fullname (for use when running under emacs)
2 => output annotated suitably for use by programs that control GDB.

** gdb key map in emacs

| GDB keys                 | My Keys | GDB functions                  |
|--------------------------+---------+--------------------------------|
| C-x C-a C-r              | M-5     | gud-cont (W) / gud-go (L)      |
| C-x C-a C-b or C-x <SPC> | M-6     | gud-break                      |
| C-x C-a C-n              | M-7     | gud-next                       |
| C-x C-a C-s              | M-8     | gud-step                       |
| C-x C-a C-p              | M-9     | gud-print                      |
| C-x C-a C-w              | M-0     | gud-watch                      |
| C-x C-a C-u              | C-5     | gud-until                      |
| C-x C-a C-d              | C-6     | gud-remove                     |
| C-x C-a C-f              | C-7     | gud-finish                     |
| C-x C-a C-j              | C-8     | gud-jump                       |
|                          | C-9     | gud-pstar                      |
| C-x C-a C-l              | C-0     | gud-refresh                    |
|                          | F1-1    | gdb-frame-io-buffer            |
|                          | F1-2    | gdb-frame-locals-for-thread    |
|                          | F1-3    | gdb-frame-stack-for-thread     |
|                          | F1-4    | gdb-frame-registers-for-thread |
|                          | F1-5    | gdb-frame-stack-buffer         |
|                          | F1-6    | gdb-frame-breakpoints-buffer   |
|                          | F1-7    | gdb-frame-assembler-buffer     |
|                          | F1-8    | gdb-frame-memory-buffer        |
|                          | F1-9    | gdb-frame-locals-buffer        |
|                          | F1-0    | gdb-frame-gdb-buffer           |
| C-x C-a <                | F1--    | gud-up                         |
| C-x C-a >                | F1-=    | gud-down                       |
|                          | F8      | gdb                            |
|                          | S-F8    | gud-kill                       |
|                          | C-F8    | gdb-restore-windows            |
|                          | M-F8    | gdb-many-windows               |
|                          | C-x F8  | gud-tooltip-mode               |
|                          | C-c F8  | gud-break-main                 |
| C-x C-a C-i              |         | gud-stepi                      |
| C-x C-a C-t              |         | gud-tbreak                     |
| <TAB>                    |         | gud-gdb-complete-command       |

** core dump debugging

#+BEGIN_SRC sh
## allow core file creation
$ ulimit -c unlimited

$ gdb -q `which program` /path/to/core
gdb> bt full

$ gdb -q `which program` --attach `pgrep -o  program`
gdb> bt full
#+END_SRC

** execute command from file

#+BEGIN_SRC sh
$ gdb -x command_file_name
or
(gdb) source [-s] [-v] command_file_name
#+END_SRC

** Debugging Individual Threads

#+BEGIN_SRC sh
## https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/developer_guide/gdbthreads
## These can be added to .gdbinit
set non-stop on
set target-async on

## Take note of the & at the end of the continue. This allows the GDB prompt to return so other commands can be executed.
## Using the interrupt, execution can be stopped should thread 3 become interesting again.
(gdb) info threads
(gdb) thread <number>
(gdb) next
(gdb) continue &
(gdb) interrupt
#+END_SRC

** C Preprocessor Macros

#+BEGIN_SRC s
(gdb) info macro [-a|-all] [--] macro

## Pass the -gdwarf-214 and -g3 flags to ensure the compiler includes information about preprocessor macros in the debugging information
$ gcc -gdwarf-2 -g3 sample.c -o sample
#+END_SRC
