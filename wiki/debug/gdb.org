* GDB

https://www.emacswiki.org/emacs/GDB-MI

** gdb -annotate

$ gdb -annotate 1 /bin/ls
(gdb) help set annotate
Set annotation_level.
0 => normal
1 => fullname (for use when running under emacs)
2 => output annotated suitably for use by programs that control GDB.

** gdb key map in emacs

| GDB keys                 | My Keys | GDB functions                  |
|--------------------------+---------+--------------------------------|
| C-x C-a C-r              | M-5     | gud-cont (W) / gud-go (L)      |
| C-x C-a C-b or C-x <SPC> | M-6     | gud-break                      |
| C-x C-a C-n              | M-7     | gud-next                       |
| C-x C-a C-s              | M-8     | gud-step                       |
| C-x C-a C-p              | M-9     | gud-print                      |
| C-x C-a C-w              | M-0     | gud-watch                      |
| C-x C-a C-u              | C-5     | gud-until                      |
| C-x C-a C-d              | C-6     | gud-remove                     |
| C-x C-a C-f              | C-7     | gud-finish                     |
| C-x C-a C-j              | C-8     | gud-jump                       |
|                          | C-9     | gud-pstar                      |
| C-x C-a C-l              | C-0     | gud-refresh                    |
|                          | F1-1    | gdb-frame-io-buffer            |
|                          | F1-2    | gdb-frame-locals-for-thread    |
|                          | F1-3    | gdb-frame-stack-for-thread     |
|                          | F1-4    | gdb-frame-registers-for-thread |
|                          | F1-5    | gdb-frame-stack-buffer         |
|                          | F1-6    | gdb-frame-breakpoints-buffer   |
|                          | F1-7    | gdb-frame-assembler-buffer     |
|                          | F1-8    | gdb-frame-memory-buffer        |
|                          | F1-9    | gdb-frame-locals-buffer        |
|                          | F1-0    | gdb-frame-gdb-buffer           |
| C-x C-a <                | F1--    | gud-up                         |
| C-x C-a >                | F1-=    | gud-down                       |
|                          | F8      | gdb                            |
|                          | S-F8    | gud-kill                       |
|                          | C-F8    | gdb-restore-windows            |
|                          | M-F8    | gdb-many-windows               |
|                          | C-x F8  | gud-tooltip-mode               |
|                          | C-c F8  | gud-break-main                 |
| C-x C-a C-i              |         | gud-stepi                      |
| C-x C-a C-t              |         | gud-tbreak                     |
| <TAB>                    |         | gud-gdb-complete-command       |

** core dump debugging

#+BEGIN_SRC sh
## allow core file creation
$ ulimit -c unlimited

$ gdb -q `which program` /path/to/core
gdb> bt full

$ gdb -q `which program` --attach `pgrep -o  program`
gdb> bt full
#+END_SRC

** execute command from file

#+BEGIN_SRC sh
$ gdb -x command_file_name
or
(gdb) source [-s] [-v] command_file_name
#+END_SRC

** Debugging Individual Threads

#+BEGIN_SRC sh
## https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/developer_guide/gdbthreads
## These can be added to .gdbinit
set non-stop on
set target-async on

## Take note of the & at the end of the continue. This allows the GDB prompt to return so other commands can be executed.
## Using the interrupt, execution can be stopped should thread 3 become interesting again.
(gdb) info threads
(gdb) thread <number>
(gdb) next
(gdb) continue &
(gdb) interrupt
#+END_SRC

** C Preprocessor Macros

#+BEGIN_SRC sh
(gdb) info macro [-a|-all] [--] macro

## Pass the -gdwarf-214 and -g3 flags to ensure the compiler includes information about preprocessor macros in the debugging information
$ gcc -gdwarf-2 -g3 sample.c -o sample
#+END_SRC

** Multi-Thread Debugging

#+BEGIN_SRC sh
(gdb) break file:line thread thrNum if ...
(gdb) thread apply thrNum1 thrNum2 ... continue
#+END_SRC

** Remote debugging with GDB

#+BEGIN_SRC sh
abc$ ssh xyz.example.com
xyz$ gdbserver :9999 --attach 5312
Attached; pid = 5312
Listening on port 9999
abc$ gdb -q
(gdb) target remote xyz.example.com:9999

(gdb) target remote | ssh -T xyz.example.com gdbserver - --attach 5312
(gdb) target remote | docker exec -i e0c1afa81e1d gdbserver - --attach 58
(gdb) target remote | docker exec -i e0c1afa81e1d gdbserver - /bin/sh
(gdb) target extended-remote | ssh -T root@xyz.example.com gdbserver --multi -
(gdb) attach 774
(gdb) add-inferior
Added inferior 2
(gdb) inferior 2
[Switching to inferior 2 [<null>] (<noexec>)]
(gdb) attach 871
...messages...
(gdb) info inferiors
 Num Description Executable
 * 2 process 871 target:/usr/sbin/httpd
   1 process 774 target:/usr/libexec/mysqld
#+END_SRC

** 8 gdb tricks you should know

#+BEGIN_SRC sh
## https://blogs.oracle.com/linux/post/8-gdb-tricks-you-should-know
## 1.break WHERE if COND
(gdb) break context_switch if next == init_task

## 2.command In addition to conditional breakpoints
(gdb) b do_mmap_pgoff
Breakpoint 1 at 0xffffffff8111a441: file mm/mmap.c, line 940.
(gdb) command 1
Type commands for when breakpoint 1 is hit, one per line.
End with a line saying just "end".
>print addr
>print len
>print prot
>end
(gdb)

## 3.gdb --args This one is simple, but a huge timesaver if you didn't know it
$ gdb --args pizzamaker --deep-dish --toppings=pepperoni
...
(gdb) show args
Argument list to give program being debugged when it is started is
  " --deep-dish --toppings=pepperoni".
(gdb) b main
Breakpoint 1 at 0x45467c: file oven.c, line 123.
(gdb) run
...

## 4.Finding source files
## Download debug symbols and add the source directory
[~/src]$ apt-get source coreutils
[~/src]$ sudo apt-get install coreutils-dbgsym
[~/src]$ gdb /bin/ls
GNU gdb (GDB) 7.1-ubuntu
(gdb) list main
1192    ls.c: No such file or directory.
    in ls.c
(gdb) directory ~/src/coreutils-7.4/src/
Source directories searched: /home/nelhage/src/coreutils-7.4:$cdir:$cwd
(gdb) list main
1192        }
1193    }
1194
1195    int
1196    main (int argc, char **argv)
1197    {
1198      int i;
1199      struct pending *thispend;
1200      int n_files;
1201

## set substitute-path to tell gdb how to translate paths
[~/src]$ apt-get source linux-image-2.6.32-25-generic
[~/src]$ sudo apt-get install linux-image-2.6.32-25-generic-dbgsym
[~/src]$ gdb /usr/lib/debug/boot/vmlinux-2.6.32-25-generic
(gdb) list schedule
5519    /build/buildd/linux-2.6.32/kernel/sched.c: No such file or directory.
    in /build/buildd/linux-2.6.32/kernel/sched.c
(gdb) set substitute-path /build/buildd/linux-2.6.32 /home/nelhage/src/linux-2.6.32/
(gdb) list schedule
5519
5520    static void put_prev_task(struct rq *rq, struct task_struct *p)
5521    {
5522        u64 runtime = p->se.sum_exec_runtime - p->se.prev_sum_exec_runtime;
5523
5524        update_avg(&p->se.avg_running, runtime);
5525
5526        if (p->state == TASK_RUNNING) {
5527            /*
5528             * In order to avoid avg_overlap growing stale when we are

## 5.Debugging macros
$ make KCFLAGS=-ggdb3
...
(gdb) break schedule
(gdb) continue
(gdb) p/x GFP_ATOMIC
$1 = 0x20
(gdb) p task_is_stopped_or_traced(init_task)
$2 = 0

(gdb) macro expand task_is_stopped_or_traced(init_task)
expands to: ((init_task->state & (4 | 8)) != 0)
(gdb) info macro task_is_stopped_or_traced
Defined at include/linux/sched.h:218
  included at include/linux/nmi.h:7
  included at kernel/sched.c:31
#define task_is_stopped_or_traced(task) ((task->state & (__TASK_STOPPED | __TASK_TRACED)) != 0)

## 6.gdb variables Whenever you print a variable in gdb
(gdb) set $foo = 4
(gdb) p $foo
$3 = 4

## 7.Register variables
(gdb) break write if $rsi == 2

## 8.The x command
x/FMT ADDRESS
[~]$ grep saved_command /proc/kallsyms
ffffffff81946000 B saved_command_line
(gdb) x/s 0xffffffff81946000
ffffffff81946000 <>:     "root=/dev/sda1 quiet"

## x/i is invaluable as a quick way to disassemble memory
(gdb) x/5i schedule
   0xffffffff8154804a <schedule>:   push   %rbp
   0xffffffff8154804b <schedule+1>: mov    $0x11ac0,%rdx
   0xffffffff81548052 <schedule+8>: mov    %gs:0xb588,%rax
   0xffffffff8154805b <schedule+17>:    mov    %rsp,%rbp
   0xffffffff8154805e <schedule+20>:    push   %r15
</schedule+20></schedule+17></schedule+8></schedule+1></schedule>

#+END_SRC

** GDB UI

#+BEGIN_SRC sh
$ gdb -tui
or
$ gdbtui
$ gdb  ## Press ctrl + x + a
#+END_SRC

** Conditional breakpoint in GDB

break x:20 if strcmp(y, "hello") == 0
20 is line number, x can be any filename and y can be any variable.
** How do I set a breakpoint on operator< with GDB

(gdb) p 'operator <'
$1 = {bool (MyClass &, MyClass &)} 0x4009aa <operator<(MyClass&, MyClass&)>

(gdb) b *0x4009aa
Breakpoint 1 at 0x4009aa: file test.h, line 5.
** Get source code for libc for debugging in gdb

#+begin_src sh
$ printf "deb http://ddebs.ubuntu.com %s main restricted universe multiverse\n" \
  $(lsb_release -cs){,-updates,-security,-proposed} | \
  sudo tee -a /etc/apt/sources.list.d/ddebs.list
$ sudo apt install ubuntu-dbgsym-keyring
$ sudo apt update
$ sudo apt install coreutils-dbgsym
$ sudo apt install libc6-dbg

## get source
$ sudo cp /etc/apt/sources.list /etc/apt/sources.list~
$ sudo sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
$ sudo apt-get update
$ apt source libc6

## test
gcc -ggdb3 -O0 -std=c99 -Wall -Wextra -pedantic -o main.out main.c
gdb -ex 'set substitute-path . glibc-2.35'  main.out
#+end_src

** gdb source path

#+begin_src sh
## https://sourceware.org/gdb/current/onlinedocs/gdb.html/Source-Path.html
## Use directory with no argument to reset the source path to its default value.
## Use directory with suitable arguments to reinstall the directories you want in the source path.
## You can add all the directories in one command.
(gdb) set substitute-path from to
(gdb) unset substitute-path [path]
(gdb) show substitute-path [path]
#+end_src

** gdb static build

#+begin_src sh
## https://github.com/guyush1/gdb-static/releases
#+end_src

** Print struct

#+begin_src sh
## print out the definition of a struct or class
(gdb) ptype test
(gdb) ptype /o test

## print offsets
(gdb) macro define offsetof(t, f) &((t *) 0)->f
(gdb) p offsetof(struct foo, member)
#+end_src

** Copy content from GDB output window when in TUI mode

#+begin_src sh
## Hold shift and use the mouse to select text
#+end_src sh

** Change UI size in TUI mode

#+begin_src sh
(gdb) winheight name +count
(gdb) winheight name -count
(gdb) winheight src + 10
(gdb) winheight src - 5
#+end_src sh
