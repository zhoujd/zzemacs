* Bash
#+title: Bash Tips

** Echo with colors

#+begin_src sh
## https://www.colorhexa.com/
## cecho "hello world" green
cecho() {
    local exp=$1
    local color=$2

    if ! [[ $color =~ '^[0-9]$' ]] ; then
        case $(echo $color | tr '[:upper:]' '[:lower:]') in
            black) color=0 ;;
            red) color=1 ;;
            green) color=2 ;;
            yellow) color=3 ;;
            blue) color=4 ;;
            magenta) color=5 ;;
            cyan) color=6 ;;
            white|*) color=7 ;; # white or invalid color
        esac
    fi

    tput setaf $color
    echo $exp
    tput sgr0
}

## say @b@green[[Success]]
say() {
    echo "$@" | \
        sed -e "s/\(\(@\(red\|green\|yellow\|blue\|magenta\|cyan\|white\|reset\|b\|u\)\)\+\)[[]\{2\}\(.*\)[]]\{2\}/\1\4@reset/g" \
            -e "s/@red/$(tput setaf 1)/g" \
            -e "s/@green/$(tput setaf 2)/g" \
            -e "s/@yellow/$(tput setaf 3)/g" \
            -e "s/@blue/$(tput setaf 4)/g" \
            -e "s/@magenta/$(tput setaf 5)/g" \
            -e "s/@cyan/$(tput setaf 6)/g" \
            -e "s/@white/$(tput setaf 7)/g" \
            -e "s/@reset/$(tput sgr0)/g" \
            -e "s/@b/$(tput bold)/g" \
            -e "s/@u/$(tput sgr 0 1)/g"
}
#+end_src

** How to use bash array in a shell script

#+begin_src sh

## Create an array
$ declare -a my_array
$ declare -A my_array
$ my_array=(foo bar)
$ my_array[0]=foo

## Bash Array operations
$ echo ${my_array[@]}
$ echo ${my_array[*]}
$ my_array=(foo bar)
$ for i in "${my_array[@]}"; do echo "$i"; done
foo
bar
$ for i in "${my_array[*]}"; do echo "$i"; done
foo bar

## Print the keys of a bash array
$ my_array=(foo bar baz)
$ for index in "${!my_array[@]}"; do echo "$index"; done
0
1
2

$ declare -A my_array
$ my_array=([foo]=bar [baz]=foobar)
$ for key in "${!my_array[@]}"; do echo "$key"; done
baz
foo

## Getting the size of an bash array
$ my_array=(foo bar baz)
$ echo "the array contains ${#my_array[@]} elements"
the array contains 3 elements

## Adding elements to an bash array
$ my_array=(foo bar)
$ my_array+=(baz)
$ echo "${my_array[@]}"
foo bar baz

## Multiple elements can be added at a time
$ my_array=(foo bar)
$ my_array+=(baz foobar)
$ echo "${my_array[@]}"
foo bar baz foobar

## Deleting an element from the bash array
$ my_array=(foo bar baz)
$ unset my_array[1]
$ echo ${my_array[@]}
foo baz

$ echo ${!my_array[@]}
0 2

$ declare -A my_array
$ my_array+=([foo]=bar [baz]=foobar)
$ unset my_array[foo]
$ echo ${my_array[@]}
foobar

$ unset my_array
$ echo ${!my_array[@]}
#+end_src

** Joining bash arguments into single string with spaces

#+begin_src sh
## https://unix.stackexchange.com/questions/197792/joining-bash-arguments-into-single-string-with-spaces
$ cat script.sh
#!/bin/sh
str="'$*'"
echo "$str"

$ sh script.sh one two three four 5
'one two three four 5'

$ cat script.sh
#!/bin/sh
old="$IFS"
IFS='/'
str="'$*'"
echo "$str"
IFS=$old

$ sh script.sh one two three four
'one/two/three/four'
#+end_src

** Parameter

#+begin_src sh
## http://mywiki.wooledge.org/BashGuide/Parameters
## It means that if $ARGUMENT is set, it will be replaced by the string x
$ echo  ${ARGUMENT+x}

$ ARGUMENT=123
$ echo  ${ARGUMENT+x}
x
#+end_src

** Script argument

#+begin_src sh
$1 is the first argument
$2 is the second argument
$n is the nth argument
"$@" expands as "$1" "$2" "$3" and so on
"$*" expands as "$1c$2c$3" , where c is the first character of IFS
"$@" is the most used one. "$*" is used rarely since it gives all arguments as a single string.
#+end_src

** String operations

#+begin_src sh
${file//RELEASE/"$1"}
${file%.*}
${file%%.*}
${file#.*}
${file##.*}
#+end_src

** Sed to replace a multi-line string

#+begin_src sh
#!/bin/bash

# https://unix.stackexchange.com/questions/26284/how-can-i-use-sed-to-replace-a-multi-line-string
# copy & paste content that you want to substitute

AA=$( cat <<\EOF | sed -z -e 's#\([][^$*\.#]\)#\\\1#g' -e 's#\n#\\n#g'
a test
Please do not
EOF
)

BB=$( cat <<\EOF | sed -z -e 's#\([&\#]\)#\\\1#g' -e 's#\n#\\n#g'
not a test
Be
EOF
)

sed -z -i 's#'"${AA}"'#'"${BB}"'#g' *.txt   # apply to all *.txt files
#+end_src

** Loop 1 hour in bash script

#+begin_src sh
#!/bin/bash
START=`date +%s`
while [ $(( $(date +%s) - 3600 )) -lt $START ]; do
    ....
done

## Run the command for 30s and kill it after 10s if still running
timeout -k 10s 30s command

## Here are two ways but the timeout
command &
sleep 30 && kill $!

firefox &
sleep 30 && pkill firefox
#+end_src

** Background rsync and pid from a shell script
#+begin_src sh
# check to make sure script isn't still running
# if it's still running then exit this script
sScriptName="$(basename $0)"
if [ $(pidof -x ${sScriptName}| wc -w) -gt 2 ]; then
    exit
fi
#+end_src
