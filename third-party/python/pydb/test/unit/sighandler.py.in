#!@PYTHON@ -t
'Unit test for pydb.sighandler'
import inspect, os, signal, sys, unittest

top_builddir = "@top_builddir@"
if top_builddir[-1] != os.path.sep:
    top_builddir += os.path.sep
sys.path.insert(0, os.path.join(top_builddir, 'pydb'))
top_srcdir = "@top_srcdir@"
if top_srcdir[-1] != os.path.sep:
    top_srcdir += os.path.sep
sys.path.insert(0, os.path.join(top_srcdir, 'pydb'))

from sighandler import canonic_signame, lookup_signame, lookup_signum, YN

class TestSigHandler(unittest.TestCase):

    def test_YN(self):
        for expect, b in (('Yes', True), ('No', False)):
            self.assertEqual(expect, YN(b))
            pass
        return
    
    def test_canonic_signame(self):
        for expect, name_num in (('SIGTERM',  '15'), 
                                 ('SIGTERM', '-15'), 
                                 ('SIGTERM', 'term'), 
                                 ('SIGTERM', 'sigterm'),
                                 ('SIGTERM', 'TERM'), 
                                 (None, '300'),
                                 (False, 'bogus')):
            self.assertEqual(expect, canonic_signame(name_num),
                             'name_num: %s' % name_num)
            pass
        pass

    def test_lookup_signame(self):
        for expect, num in (('SIGTERM', 15), ('SIGTERM', -15), 
                          (None, 300)):
            self.assertEqual(expect, lookup_signame(num))
            pass
        return
    
    def test_lookup_signum(self):
        for expect, name in ((15, 'SIGTERM'), (15, 'TERM'), 
                             (15, 'term'), (None, 'nothere')):
            self.assertEqual(expect, lookup_signum(name))
            pass
        return

    def test_lookup_signame_signum(self):
        for signum in range(signal.NSIG):
            signame = lookup_signame(signum)
            if signame is not None:
                self.assertEqual(signum, lookup_signum(signame))
                # Try without the SIG prefix
                self.assertEqual(signum, lookup_signum(signame[3:]))
                pass
            pass
        return

    pass

if __name__ == '__main__':
    unittest.main()
