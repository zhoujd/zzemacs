#!@PYTHON@ -t
# $Id: test-dbgcall.py.in,v 1.3 2008/12/26 02:40:45 rockyb Exp $ -*- Python -*-
"Unit test for Extended Python debugger's debugger() call"
import difflib, os, sys, time, unittest
from subprocess import *

top_builddir = "@top_builddir@"
if top_builddir[-1] != os.path.sep:
    top_builddir += os.path.sep
sys.path.insert(0, os.path.join(top_builddir, 'pydb'))
top_srcdir = "@top_srcdir@"
if top_srcdir[-1] != os.path.sep:
    top_srcdir += os.path.sep
sys.path.insert(0, os.path.join(top_srcdir, 'pydb'))

import pydb                

srcdir = "@srcdir@"
if srcdir[-1] != os.path.sep:
    srcdir += os.path.sep

class DbgCallTests(unittest.TestCase):

    def run_python(self, testname, pythonfile):
        global srcdir, builddir, pydir
        
        if sys.hexversion >= 0x02050000:
            rightfile   = os.path.join(srcdir, 'data',
                                       "%s-2.5.right" % testname)
        else:
            rightfile   = os.path.join(srcdir, 'data',
                                   "%s.right" % testname)
            pass
        
        outfile    = 'dbgcall.out'
        cmd = '%s %s >%s' % ('@PYTHON@', pythonfile, outfile)
        os.system(cmd)
#         p = Popen(['@PYTHON@', pythonfile], stdout=PIPE)
#         output = p.communicate()[0]
#         if p.returncode != 0:
#             print output
#             print p.returncode
#             self.assertTrue(False, 'Could not run %s' % pythonfile)
#             return
        
        fromfile  = rightfile
        fromdate  = time.ctime(os.stat(fromfile).st_mtime)
        fromlines = open(fromfile, 'U').readlines()
        tofile    = outfile
        todate    = time.ctime(os.stat(tofile).st_mtime)
        tolines   = open(tofile, 'U').readlines()
        diff = list(difflib.unified_diff(fromlines[1:], tolines[1:], fromfile,
                                         tofile, fromdate, todate))
        if len(diff) == 0:
            os.unlink(outfile)
        else:
            for line in diff:
                print line,
        self.assertEqual(len(diff), 0)
        return
    
    ## Don't use assertTrue to be compatible with older version of
    ## unittest
    
    def test_debugger_call(self):
        """Test debugger with 'dbg_cmds', and 'continue'"""
        global srcdir
        testname  = 'dbgcall'
        pythonfile = '%s%s.py' % (srcdir, testname,)
        self.run_python(testname, pythonfile)
        return
        
if __name__ == "__main__":
    unittest.main()
